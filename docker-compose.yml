# docker-compose.yml - UPDATED for Redis Cloud

services:

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: maichart_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE_NAME}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - maichart_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FastAPI Backend Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_backend
    ports:
      - "${FASTAPI_PORT}:${FASTAPI_PORT}"
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    env_file:
      - ./backend/.env
    environment:
      - FASTAPI_HOST=0.0.0.0
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - MONGODB_CONNECTION_STRING=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE_NAME}?authSource=admin
      - MEDICAL_EXTRACTION_STREAM=medical_extraction_queue
      - MEDICAL_EXTRACTION_CONSUMER_GROUP=medical_extractors
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FASTAPI_PORT}/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    networks:
      - maichart_network

  # Direct Transcription Worker
  transcription_worker_direct:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_transcription_direct
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    env_file:
      - ./backend/.env
    environment:
      - WORKER_TYPE=direct
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - MONGODB_CONNECTION_STRING=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE_NAME}?authSource=admin
    command: python workers/transcription_worker.py direct
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - maichart_network

  # Chunk Transcription Worker
  transcription_worker_chunk:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_transcription_chunk
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    env_file:
      - ./backend/.env
    environment:
      - WORKER_TYPE=chunk
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - MONGODB_CONNECTION_STRING=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE_NAME}?authSource=admin
    command: python workers/transcription_worker.py chunk
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - maichart_network

  # Enhanced Medical Extraction Worker
  medical_extraction_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_medical_extraction
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    env_file:
      - ./backend/.env
    environment:
      - WORKER_TYPE=medical_extraction
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - MONGODB_CONNECTION_STRING=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE_NAME}?authSource=admin
      - MEDICAL_EXTRACTION_STREAM=medical_extraction_queue
      - MEDICAL_EXTRACTION_CONSUMER_GROUP=medical_extractors
    command: python workers/enhanced_medical_extraction_worker.py
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - maichart_network

  # Frontend - React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: maichart_frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:${FASTAPI_PORT}
      - REACT_APP_ENABLE_MEDICAL_EXTRACTION=${ENABLE_MEDICAL_EXTRACTION}
      - REACT_APP_ENABLE_MONGODB_FEATURES=${ENABLE_MONGODB}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - maichart_network

networks:
  maichart_network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
