# docker-compose.yml - FastAPI production setup with Medical Extraction
version: '3.8'
services:
  # FastAPI Backend Server
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_fastapi_backend
    ports:
      - "5001:5001"
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    environment:
      - FASTAPI_ENV=production
      - FASTAPI_DEBUG=false
      - FASTAPI_PORT=5001
      - FASTAPI_HOST=0.0.0.0
      # Redis settings - from environment variables
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      # API Keys - MUST be set in .env
      - ASSEMBLYAI_API_KEY=${ASSEMBLYAI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Medical extraction settings
      - ENABLE_MEDICAL_EXTRACTION=${ENABLE_MEDICAL_EXTRACTION:-true}
      - BIOBERT_MODEL=${BIOBERT_MODEL:-dmis-lab/biobert-base-cased-v1.2}
      - MEDICAL_EXTRACTION_CONFIDENCE_THRESHOLD=${MEDICAL_EXTRACTION_CONFIDENCE_THRESHOLD:-0.7}
      # Security
      - SECRET_KEY=${SECRET_KEY}
      # File settings
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 300s
    networks:
      - maichart_network

  # Direct Transcription Worker
  transcription_worker_direct:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_transcription_worker_direct
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    environment:
      - FASTAPI_ENV=production
      - WORKER_TYPE=direct
      # Redis settings - from environment variables
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      # API Keys
      - ASSEMBLYAI_API_KEY=${ASSEMBLYAI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Medical extraction settings
      - ENABLE_MEDICAL_EXTRACTION=${ENABLE_MEDICAL_EXTRACTION:-true}
    command: python workers/transcription_worker.py direct
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - maichart_network

  # Chunk Transcription Worker (for large files)
  transcription_worker_chunk:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_transcription_worker_chunk
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    environment:
      - FASTAPI_ENV=production
      - WORKER_TYPE=chunk
      # Redis settings - from environment variables
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      # API Keys
      - ASSEMBLYAI_API_KEY=${ASSEMBLYAI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Medical extraction settings
      - ENABLE_MEDICAL_EXTRACTION=${ENABLE_MEDICAL_EXTRACTION:-true}
    command: python workers/transcription_worker.py chunk
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - maichart_network

  # NEW: Medical Extraction Worker
  medical_extraction_worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: maichart_medical_extraction_worker
    volumes:
      - "./backend/uploads:/app/uploads"
      - "./backend/transcripts:/app/transcripts"
      - "./backend/chunks:/app/chunks"
      - "./backend/logs:/app/logs"
    environment:
      - FASTAPI_ENV=production
      - WORKER_TYPE=medical_extraction
      # Redis settings - from environment variables
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      # Medical extraction settings
      - ENABLE_MEDICAL_EXTRACTION=${ENABLE_MEDICAL_EXTRACTION:-true}
      - BIOBERT_MODEL=${BIOBERT_MODEL:-dmis-lab/biobert-base-cased-v1.2}
      - MEDICAL_EXTRACTION_CONFIDENCE_THRESHOLD=${MEDICAL_EXTRACTION_CONFIDENCE_THRESHOLD:-0.7}
    command: python workers/medical_extraction_worker.py
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - maichart_network

  # Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: maichart_frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - REACT_APP_ENABLE_MEDICAL_EXTRACTION=${ENABLE_MEDICAL_EXTRACTION:-true}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - maichart_network

networks:
  maichart_network:
    driver: bridge

volumes:
  uploads:
    driver: local
  transcripts:
    driver: local
  chunks:
    driver: local
  logs:
    driver: local